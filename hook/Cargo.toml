[package]
name = "open-coroutine-hook"
version.workspace = true
edition.workspace = true
authors.workspace = true
description = "The syscall hook for open-coroutine"
repository.workspace = true
keywords = ["open-coroutine", "hook", "syscall"]
categories = ["os", "concurrency", "asynchronous"]
license.workspace = true
readme.workspace = true

[dependencies]
once_cell.workspace = true
open-coroutine-core.workspace = true

[target.'cfg(unix)'.dependencies]
libc.workspace = true

[target.'cfg(windows)'.dependencies]
windows-sys = { workspace = true, features = [
    "Win32_Foundation",
    "Win32_System_Diagnostics_Debug",
    "Win32_System_Threading",
    "Win32_Security",
    "Win32_System_LibraryLoader",
    "Win32_System_SystemServices"
] }
minhook.workspace = true

[features]
# Print some help log.
# Enable for default.
log = ["open-coroutine-core/log"]

# Provide preemptive scheduling implementation.
# Enable for default.
preemptive = ["open-coroutine-core/preemptive"]

# Provide net API abstraction and implementation.
net = ["open-coroutine-core/net"]

# Provide io_uring adaptation, this feature only works in linux.
io_uring = ["open-coroutine-core/io_uring"]

# Provide syscall implementation.
syscall = ["open-coroutine-core/syscall"]

default = ["open-coroutine-core/default"]

[lib]
crate-type = ["cdylib"]
